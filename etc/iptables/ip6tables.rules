*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [0:0]
:TCP - [0:0]
:UDP - [0:0]

-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# this rule will accept all traffic from the 'loopback' (lo) interface, which is necessary
# for many applications and services
-A INPUT -i lo -j ACCEPT

# this rule accepts new incoming ICMP echo requests also known as pings
# only the first packet will be considered as new, the others will be handled by the RELATED,ESTABLISHED rule
# pings are currently blocked inside /etc/sysctl.d/99-sysctl.conf
-A INPUT -p ipv6-icmp --icmpv6-type 128 -m conntrack --ctstate NEW -j ACCEPT
#-A INPUT -p ipv6-icmp --icmpv6-type address-mask-request -j DROP
#-A INPUT -p ipv6-icmp --icmpv6-type timestamp-request -j DROP

# drop exessive RST packets to avoid smurf attacks
-A INPUT -p tcp -m tcp --tcp-flags RST RST -m limit --limit 2/second --limit-burst 2 -j ACCEPT

# this rule will drop all traffic with an "INVALID" state match
-A INPUT -m conntrack --ctstate INVALID -j DROP
-A INPUT -s fe80::/10 -p ipv6-icmp -j ACCEPT

# drop all non-conforming packets to be from a loopback address
-4 -A INPUT -s 127.0.0.0/8 ! -i lo -j DROP
-6 -A INPUT -s ::1/128 ! -i lo -j DROP

# Drop all packets that are going to broadcats, multicast or anycast address
-4 -A INPUT -m addrtype --dst-type BROADCAST -j DROP
-4 -A INPUT -m addrtype --dst-type MULTICAST -j DROP
#-4 -A INPUT -m addrtype --dst-type ANYCAST -j DROP
-4 -A INPUT -d 224.0.0.0/4 -j DROP

# chain for preventing SSH brute-force attacks
# permits 10 new connections within 5 minutes from a single host then drops incoming connections from that host
# beyond a burst of 100 connections we log at up 1 attempt per second to prevent filling up with logs
-N IN_SSH
-A INPUT -p tcp --dport 22 -m conntrack --ctstate NEW -j IN_SSH
-A IN_SSH -m recent --name sshbf --rttl --rcheck --hitcount 3 --seconds 10 -j DROP
-A IN_SSH -m recent --name sshbf --rttl --rcheck --hitcount 4 --seconds 1800 -j DROP
-A IN_SSH -m recent --name sshbf --set -j ACCEPT


# --- TCP chain ---
# SYN scan
-I TCP -p tcp -m recent --update --rsource --seconds 60 --name TCP-PORTSCAN -j REJECT --reject-with tcp-reset

# modify the rule for rejecting TCP packets to add hosts with rejected packets to the TCP-PORTSCAN list
#-D INPUT -p tcp -j REJECT --reject-with tcp-reset
-A INPUT -p tcp -m recent --set --rsource --name TCP-PORTSCAN -j REJECT --reject-with tcp-reset

-A INPUT -m recent --name TCP-PORTSCAN --rcheck --seconds 1000000000 -j DROP
-A FORWARD -m recent --name TCP-PORTSCAN --rcheck --seconds 1000000000 -j DROP

# add scanners to the portscan list and log attempts
-A INPUT -p tcp -m tcp --dport 139 -m recent --name TCP-PORTSCAN --set -j LOG --log-prefix "Portscan: "
-A INPUT -p tcp -m tcp --dport 139 -m recent --name TCP-PORTSCAN --set -j DROP

-A FORWARD -p tcp -m tcp --dport 139 -m recent --name TCP-PORTSCAN --set -j LOG --log-prefix "Portscan: "
-A FORWARD -p tcp -m tcp --dport 139 -m recent --name TCP-PORTSCAN --set -j DROP

# drop all null packets and with incoming fragments
-A INPUT -p tcp --tcp-flags ALL NONE -j DROP
#-A INPUT -f -j DROP


# following rules attach the TCP connection to the input to handle all incoming new connections
# once a connection is accepted by the TCP chain, it is handled by the RELATED/ESTABLISHED traffic rule
-A INPUT -p tcp --tcp-flags FIN,SYN,RST,ACK SYN -m conntrack --ctstate NEW -j TCP

# rules restricting ssh traffic
#-A INPUT -s 192.168.0.1/32 -p tcp -m tcp --dport 22 -m comment --comment "Only home workstation can ssh in" -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT

-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT


# ---  UDP chain ---
# reject packets from hosts on the UDP-PORTSCAN list 
-I UDP -p udp -m recent --update --rsource --seconds 60 --name UDP-PORTSCAN -j DROP
#REJECT --reject-with "icmpv6-port-unreachable"

# modify the reject rule
#-D INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
-A INPUT -p udp -m recent --set --rsource --name UDP-PORTSCAN -j DROP
#REJECT --reject-with "icmpv6-port-unreachable"

# attach the UDP connections to the input to handle all incoming UDP connections
# once a connection is accepted by UDP chain, it is handled by RELATED/ESTABLISHED traffic rule
-A INPUT -p udp -m conntrack --ctstate NEW -j UDP

-A UDP -p udp --dport 53 -j ACCEPT

# protection against spoofing attacks
#-A INPUT -s 10.0.0.0/8 -j LOG --log-prefix "Spoofed IP"
#-A INPUT -s 10.0.0.0/8 -j DROP
#-A INPUT -s 127.0.0.0/8 -j LOG --log-prefix "Spoofed IP"
#-A INPUT -s 127.0.0.0/8 -j DROP
#-A INPUT -s 169.254.0.0/16 -j LOG --log-prefix "Spoofed IP"
#-A INPUT -s 169.254.0.0/16 -j DROP
#-A INPUT -s 192.168.0.0/16 -j LOG --log-prefix "Spoofed IP"
#-A INPUT -s 192.168.0.0/16 -j DROP
#-A INPUT -s 172.16.0.0/12 -j LOG --log-prefix "'Spoofed IP"
#-A INPUT -s 172.16.0.0/12 -j DROP

# Multicast addresses
#-A INPUT -s 224.0.0.0/4 -j LOG --log-prefix "Spoofed IP s"
#-A INPUT -s 224.0.0.0/4 -j DROP
#-A INPUT -d 224.0.0.0/4 -j LOG --log-prefix "Spoofed IP d"
#-A INPUT -d 224.0.0.0/4 -j DROP
#-A INPUT -s 240.0.0.0/5 -j LOG --log-prefix "Spoofed IP s"
#-A INPUT -s 240.0.0.0/5 -j DROP
#-A INPUT -d 240.0.0.0/5 -j LOG --log-prefix "Spoofed IP d"
#-A INPUT -d 240.0.0.0/5 -j DROP
#-A INPUT -s 0.0.0.0/8 -j LOG --log-prefix "Spoofed IP s"
#-A INPUT -s 0.0.0.0/8 -j DROP
#-A INPUT -d 0.0.0.0/8 -j LOG --log-prefix "Spoofed IP d"
#-A INPUT -d 0.0.0.0/8 -j DROP
#-A INPUT -d 239.255.255.0/24 -j LOG --log-prefix "Spoofed IP d"
#-A INPUT -d 239.255.255.0/24 -j DROP
#-A INPUT -s 255.0.0.0/8 -j LOG --log-prefix "Spoofed IP s"
#-A INPUT -s 255.0.0.0/8 -j DROP
#-A INPUT -d 255.0.0.0/8 -j LOG --log-prefix "Spoofed IP d"
#-A INPUT -d 255.0.0.0/8 -j DROP
#-A INPUT -d 255.255.255.255 -j LOG --log-prefix "Spoofed IP d"
#-A INPUT -d 255.255.255.255 -j DROP

# drop all invalid packets
-A INPUT -m state --state INVALID -j DROP
-A FORWARD -m state --state INVALID -j DROP
-A OUTPUT -m state --state INVALID -j DROP

# this is a final rule to the input - reject all remaining incoming traffic with icmp protocol unreachable messages
-A INPUT -p udp -j DROP 
#REJECT --reject-with icmp-port-unreachable
-A INPUT -p tcp -j REJECT --reject-with tcp-reset

-A INPUT -j DROP
#REJECT --reject-with icmpv6-adm-prohibited

COMMIT
