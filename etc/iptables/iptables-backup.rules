# Generated by iptables-save v1.8.4 on Tue Apr 28 22:07:44 2020
*nat
:PREROUTING ACCEPT [11:5237]
:INPUT ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
#-A PREROUTING -i ppp0 -p udp -m udp --dport 22 -j DNAT --to-destination 192.16.8.120
-A PREROUTING -i ppp0 -p udp -m udp --dport 22 -j DNAT --to-destination 192.168.0.102
-A POSTROUTING -s 192.168.0.0/24 -o ppp0 -j MASQUERADE

COMMIT

# Completed on Tue Apr 28 22:07:44 2020
# Generated by iptables-save v1.8.4 on Tue Apr 28 22:07:44 2020
*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT ACCEPT [21:2070]
:IN_SSH - [0:0]
:SPOOFING - [0:0]
:TCP - [0:0]
:UDP - [0:0]
:fw-interfaces - [0:0]
:fw-open - [0:0]

# --- INPUT chain ---
-A INPUT -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

# accept all traffic fom the 'loopback' (lo) interface, which is necessary for many applications
# and services
-A INPUT -i lo -j ACCEPT

# this rule accepts new incoming ICPM echo requests, also known as pings
# only the first packat will be considered as new, the pthers will be handled by RELATED, ESTABLISHED rule
# pings are currently blocked inside /etc/sysctl.d/99-sysctl.conf
-A INPUT -p icmp -m icmp --icmp-type 8 -j DROP
-A INPUT -p icmp -m icmp --icmp-type 17 -j DROP
-A INPUT -p icmp -m icmp --icmp-type 13 -j DROP

# drop exessive RST packets to avoid smurf attacks
-A INPUT -p tcp -m tcp --tcp-flags RST RST -m limit --limit 2/sec --limit-burst 2 -j ACCEPT

# this rule will drop all traffic with an 'INVALID' state match
-A INPUT -m conntrack --ctstate INVALID -j DROP

# drop all non-conforming packets to be from a loopback address
-A INPUT -s 127.0.0.0/8 ! -i lo -j DROP

# drop all packets that are going to broadcast, multicast or anycast address
-A INPUT -m pkttype --pkt-type broadcast -j DROP
-A INPUT -m pkttype --pkt-type multicast -j DROP
-A INPUT -m pkttype --pkt-type unicast -j DROP
-A INPUT -d 224.0.0.0/4 -j DROP

# chain for preventing SSH brute-force attacks
# permist 10 new connections within 5 minutes from a single host then drops incoming connections from that host
# beyond a burst of 100 connections we log at up 1 attempt per second to prevent filling up logs
-A INPUT -p tcp -m tcp --dport 22 -m conntrack --ctstate NEW -j IN_SSH
-A IN_SSH -m recent --name sshbf --rttl --rcheck --hitcount 3 --seconds 10 -j DROP
-A IN_SSH -m recent --name sshbf --rttl --rcheck --hitcount 4 --seconds 1800 -j DROP
-A IN_SSH -m recent --name sshbf --set -j ACCEPT


-A INPUT -p tcp -m recent --update --rsource --seconds 60 --name TCP-PORTSCAN -j REJECT --reject-with tcp-reset

# modify the rule for rejecting TCP packets to add hosts with rejected packets to the TCP-PORTSCAN list
-A INPUT -p tcp -m recent --set --name TCP-PORTSCAN --mask 255.255.255.0 --rsource -j REJECT --reject-with tcp-reset

-A INPUT -m recent --rcheck --seconds 1000000000 --name TCP-PORTSCAN --mask 255.255.255.0 --rsource -j DROP

# add scanners to the portscan list and log attempts
-A INPUT -p tcp -m tcp --dport 139 -m recent --set --name TCP-PORTSCAN --mask 255.255.255.0 --rsource -j LOG --log-prefix "Portscan: "
-A INPUT -p tcp -m tcp --dport 139 -m recent --set --name TCP-PORTSCAN --mask 255.255.255.0 --rsource -j DROP
-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP

# drop all null packets and with incoming fragments
-A INPUT -p tcp --tcp-flags ALL NONE -j DROP
-A INPUT -f -j DROP

# following rules attach TCP connection to the input to handle all incoming new connections
# once a connection is accepted by the TCP chain, it is handled by the RELATED/ESTABLISHED traffic rule
-A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,ACK SYN -m conntrack --ctstate NEW -j TCP

# rules restricting ssh traffic
-A INPUT -s 192.168.0.1/32 -p tcp -m tcp --dport 22 -m comment --comment "Only home workstation can ssh in" -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT
-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT

# --- UDP chain ---
-A INPUT -p udp -m recent --set --name UDP-PORTSCAN --mask 255.255.255.0 --rsource -j REJECT --reject-with icmp-port-unreachable

# attach the new UDP connections to the input to handle all incoming UDP connections
# once a connection is accepted by UDP chain, it is handled by RELATED/ESTABLISHED traffic rule
-A INPUT -p udp -m conntrack --ctstate NEW -j UDP

# mainly LAN
-A INPUT -s 10.0.0.0/8 -j LOG --log-prefix "Spoofed IP"
-A INPUT -s 10.0.0.0/8 -j DROP
-A INPUT -s 127.0.0.0/8 -j LOG --log-prefix "Spoofed IP"
-A INPUT -s 127.0.0.0/8 -j DROP
-A INPUT -s 169.254.0.0/16 -j LOG --log-prefix "Spoofed IP"
-A INPUT -s 169.254.0.0/16 -j DROP
-A INPUT -s 192.168.0.0/16 -j LOG --log-prefix "Spoofed IP"
-A INPUT -s 192.168.0.0/16 -j DROP
-A INPUT -s 172.16.0.0/12 -j LOG --log-prefix "Spoofed IP"
-A INPUT -s 172.16.0.0/12 -j DROP

# Multicast addresses
-A INPUT -s 224.0.0.0/4 -j LOG --log-prefix "Spoofed IP s"
-A INPUT -s 224.0.0.0/4 -j DROP
-A INPUT -d 224.0.0.0/4 -j LOG --log-prefix "Spoofed IP d"
-A INPUT -d 224.0.0.0/4 -j DROP
-A INPUT -s 240.0.0.0/5 -j LOG --log-prefix "Spoofed IP s"
-A INPUT -s 240.0.0.0/5 -j DROP
-A INPUT -d 240.0.0.0/5 -j LOG --log-prefix "Spoofed IP d"
-A INPUT -d 240.0.0.0/5 -j DROP
-A INPUT -s 0.0.0.0/8 -j LOG --log-prefix "Spoofed IP s"
-A INPUT -s 0.0.0.0/8 -j DROP
-A INPUT -d 0.0.0.0/8 -j LOG --log-prefix "Spoofed IP d"
-A INPUT -d 0.0.0.0/8 -j DROP
-A INPUT -d 239.255.255.0/24 -j LOG --log-prefix "Spoofed IP d"
-A INPUT -d 239.255.255.0/24 -j DROP
-A INPUT -s 255.0.0.0/8 -j LOG --log-prefix "Spoofed IP s"
-A INPUT -s 255.0.0.0/8 -j DROP
-A INPUT -d 255.0.0.0/8 -j LOG --log-prefix "Spoofed IP d"
-A INPUT -d 255.0.0.0/8 -j DROP
-A INPUT -d 255.255.255.255/32 -j LOG --log-prefix "Spoofed IP d"
-A INPUT -d 255.255.255.255/32 -j DROP

# drop all invalid packets
-A INPUT -m state --state INVALID -j DROP

# this is the final rule to the input - reject all remaining incoming traffic with icmp protocol unreachable messages
-A INPUT -p udp -j REJECT --reject-with icmp-port-unreachable
-A INPUT -p tcp -j REJECT --reject-with tcp-reset
-A INPUT -j REJECT --reject-with icmp-proto-unreachable

# -- FORWARD chain ---
-A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT

-A FORWARD -m recent --rcheck --seconds 1000000000 --name TCP-PORTSCAN --mask 255.255.255.0 --rsource -j DROP

# add scanners to the portscan list and log attempts
-A FORWARD -p tcp -m tcp --dport 139 -m recent --set --name TCP-PORTSCAN --mask 255.255.255.0 --rsource -j LOG --log-prefix "Portscan: "
-A FORWARD -p tcp -m tcp --dport 139 -m recent --set --name TCP-PORTSCAN --mask 255.255.255.0 --rsource -j DROP


-A FORWARD -m state --state INVALID -j DROP

-A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -j fw-interfaces
-A FORWARD -j fw-open
-A FORWARD -j REJECT --reject-with icmp-host-unreachable

# --- OUTPUT chain ---

# accept all traffic from the loopback (lo) interface, which is necessary for many applications
# and services
-A OUTPUT -o lo -j ACCEPT

-A OUTPUT -m state --state INVALID -j DROP
-A IN_SSH -m recent --rcheck --seconds 10 --hitcount 3 --rttl --name sshbf --mask 255.255.255.0 --rsource -j DROP
-A IN_SSH -m recent --rcheck --seconds 1800 --hitcount 4 --rttl --name sshbf --mask 255.255.255.0 --rsource -j DROP
-A IN_SSH -m recent --set --name sshbf --mask 255.255.255.0 --rsource -j ACCEPT
-A SPOOFING -j LOG --log-prefix "Spoofed spurce IP"
-A TCP -p tcp -m recent --update --seconds 60 --name TCP-PORTSCAN --mask 255.255.255.0 --rsource -j REJECT --reject-with tcp-reset
-A UDP -p udp -m recent --update --seconds 60 --name UDP-PORTSCAN --mask 255.255.255.0 --rsource -j REJECT --reject-with icmp-port-unreachable
-A UDP -p udp -m udp --dport 53 -j ACCEPT
-A fw-interfaces -i wlan0 -j ACCEPT
-A fw-interfaces -i enp0s20f0u1u1 -j ACCEPT
-A fw-open -d 192.168.0.0/32 -p tcp -m tcp --dport 80 -j ACCEPT
-A fw-open -d 192.168.0.0/32 -p udp -m udp --dport 80 -j ACCEPT
COMMIT
# Completed on Tue Apr 28 22:07:44 2020
